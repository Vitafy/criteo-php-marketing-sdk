<?php
/**
 * CampaignApi
 * PHP version 5
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API Transition Swagger
 *
 * This is used to help Criteo clients transition from MAPI to Criteo API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Criteo\Marketing\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Criteo\Marketing\ApiException;
use Criteo\Marketing\Configuration;
use Criteo\Marketing\HeaderSelector;
use Criteo\Marketing\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAdSet
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\ResponseReadAdSet
     */
    public function getAdSet($ad_set_id)
    {
        list($response) = $this->getAdSetWithHttpInfo($ad_set_id);
        return $response;
    }

    /**
     * Operation getAdSetWithHttpInfo
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\ResponseReadAdSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdSetWithHttpInfo($ad_set_id)
    {
        $request = $this->getAdSetRequest($ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\ResponseReadAdSet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ResponseReadAdSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\ResponseReadAdSet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ResponseReadAdSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdSetAsync
     *
     * 
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetAsync($ad_set_id)
    {
        return $this->getAdSetAsyncWithHttpInfo($ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdSetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetAsyncWithHttpInfo($ad_set_id)
    {
        $returnType = '\Criteo\Marketing\Model\ResponseReadAdSet';
        $request = $this->getAdSetRequest($ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdSet'
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdSetRequest($ad_set_id)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getAdSet'
            );
        }

        $resourcePath = '/2021-07/marketing-solutions/ad-sets/{adSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adSetId' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBids
     *
     * Gets a the bids for campaigns and their categories
     *
     * @param  string $campaign_ids Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used. (optional)
     * @param  string $advertiser_ids Optional. The ids of the advertisers&#39; campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user&#39;s portfolio are used. (optional)
     * @param  string $category_hash_codes Optional. Filters only specified categories. By default no filtering is applied. (optional)
     * @param  string $bid_type Optional. Filters by bid type. By default no filtering is applied. (optional)
     * @param  string $campaign_status Optional. Filters by campaign status. By default no filtering is applied. (optional)
     * @param  bool $pending_changes Optional. Filters only pending changes or settled ones. By default no filtering is applied. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\CampaignBidMessage[]
     */
    public function getBids($campaign_ids = null, $advertiser_ids = null, $category_hash_codes = null, $bid_type = null, $campaign_status = null, $pending_changes = null)
    {
        list($response) = $this->getBidsWithHttpInfo($campaign_ids, $advertiser_ids, $category_hash_codes, $bid_type, $campaign_status, $pending_changes);
        return $response;
    }

    /**
     * Operation getBidsWithHttpInfo
     *
     * Gets a the bids for campaigns and their categories
     *
     * @param  string $campaign_ids Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used. (optional)
     * @param  string $advertiser_ids Optional. The ids of the advertisers&#39; campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user&#39;s portfolio are used. (optional)
     * @param  string $category_hash_codes Optional. Filters only specified categories. By default no filtering is applied. (optional)
     * @param  string $bid_type Optional. Filters by bid type. By default no filtering is applied. (optional)
     * @param  string $campaign_status Optional. Filters by campaign status. By default no filtering is applied. (optional)
     * @param  bool $pending_changes Optional. Filters only pending changes or settled ones. By default no filtering is applied. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\CampaignBidMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBidsWithHttpInfo($campaign_ids = null, $advertiser_ids = null, $category_hash_codes = null, $bid_type = null, $campaign_status = null, $pending_changes = null)
    {
        $request = $this->getBidsRequest($campaign_ids, $advertiser_ids, $category_hash_codes, $bid_type, $campaign_status, $pending_changes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\CampaignBidMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\CampaignBidMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\CampaignBidMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\CampaignBidMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBidsAsync
     *
     * Gets a the bids for campaigns and their categories
     *
     * @param  string $campaign_ids Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used. (optional)
     * @param  string $advertiser_ids Optional. The ids of the advertisers&#39; campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user&#39;s portfolio are used. (optional)
     * @param  string $category_hash_codes Optional. Filters only specified categories. By default no filtering is applied. (optional)
     * @param  string $bid_type Optional. Filters by bid type. By default no filtering is applied. (optional)
     * @param  string $campaign_status Optional. Filters by campaign status. By default no filtering is applied. (optional)
     * @param  bool $pending_changes Optional. Filters only pending changes or settled ones. By default no filtering is applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBidsAsync($campaign_ids = null, $advertiser_ids = null, $category_hash_codes = null, $bid_type = null, $campaign_status = null, $pending_changes = null)
    {
        return $this->getBidsAsyncWithHttpInfo($campaign_ids, $advertiser_ids, $category_hash_codes, $bid_type, $campaign_status, $pending_changes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBidsAsyncWithHttpInfo
     *
     * Gets a the bids for campaigns and their categories
     *
     * @param  string $campaign_ids Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used. (optional)
     * @param  string $advertiser_ids Optional. The ids of the advertisers&#39; campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user&#39;s portfolio are used. (optional)
     * @param  string $category_hash_codes Optional. Filters only specified categories. By default no filtering is applied. (optional)
     * @param  string $bid_type Optional. Filters by bid type. By default no filtering is applied. (optional)
     * @param  string $campaign_status Optional. Filters by campaign status. By default no filtering is applied. (optional)
     * @param  bool $pending_changes Optional. Filters only pending changes or settled ones. By default no filtering is applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBidsAsyncWithHttpInfo($campaign_ids = null, $advertiser_ids = null, $category_hash_codes = null, $bid_type = null, $campaign_status = null, $pending_changes = null)
    {
        $returnType = '\Criteo\Marketing\Model\CampaignBidMessage[]';
        $request = $this->getBidsRequest($campaign_ids, $advertiser_ids, $category_hash_codes, $bid_type, $campaign_status, $pending_changes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBids'
     *
     * @param  string $campaign_ids Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used. (optional)
     * @param  string $advertiser_ids Optional. The ids of the advertisers&#39; campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user&#39;s portfolio are used. (optional)
     * @param  string $category_hash_codes Optional. Filters only specified categories. By default no filtering is applied. (optional)
     * @param  string $bid_type Optional. Filters by bid type. By default no filtering is applied. (optional)
     * @param  string $campaign_status Optional. Filters by campaign status. By default no filtering is applied. (optional)
     * @param  bool $pending_changes Optional. Filters only pending changes or settled ones. By default no filtering is applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBidsRequest($campaign_ids = null, $advertiser_ids = null, $category_hash_codes = null, $bid_type = null, $campaign_status = null, $pending_changes = null)
    {

        $resourcePath = '/legacy/marketing/v1/campaigns/bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_ids !== null) {
            $queryParams['campaignIds'] = ObjectSerializer::toQueryValue($campaign_ids);
        }
        // query params
        if ($advertiser_ids !== null) {
            $queryParams['advertiserIds'] = ObjectSerializer::toQueryValue($advertiser_ids);
        }
        // query params
        if ($category_hash_codes !== null) {
            $queryParams['categoryHashCodes'] = ObjectSerializer::toQueryValue($category_hash_codes);
        }
        // query params
        if ($bid_type !== null) {
            $queryParams['bidType'] = ObjectSerializer::toQueryValue($bid_type);
        }
        // query params
        if ($campaign_status !== null) {
            $queryParams['campaignStatus'] = ObjectSerializer::toQueryValue($campaign_status);
        }
        // query params
        if ($pending_changes !== null) {
            $queryParams['pendingChanges'] = ObjectSerializer::toQueryValue($pending_changes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategories
     *
     * Gets categories
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  bool $enabled_only Optional. Returns only categories you can bid on. Defaults to false. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\CategoryMessage
     */
    public function getCategories($campaign_id, $enabled_only = null)
    {
        list($response) = $this->getCategoriesWithHttpInfo($campaign_id, $enabled_only);
        return $response;
    }

    /**
     * Operation getCategoriesWithHttpInfo
     *
     * Gets categories
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  bool $enabled_only Optional. Returns only categories you can bid on. Defaults to false. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\CategoryMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoriesWithHttpInfo($campaign_id, $enabled_only = null)
    {
        $request = $this->getCategoriesRequest($campaign_id, $enabled_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\CategoryMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\CategoryMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\CategoryMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\CategoryMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoriesAsync
     *
     * Gets categories
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  bool $enabled_only Optional. Returns only categories you can bid on. Defaults to false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesAsync($campaign_id, $enabled_only = null)
    {
        return $this->getCategoriesAsyncWithHttpInfo($campaign_id, $enabled_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoriesAsyncWithHttpInfo
     *
     * Gets categories
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  bool $enabled_only Optional. Returns only categories you can bid on. Defaults to false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesAsyncWithHttpInfo($campaign_id, $enabled_only = null)
    {
        $returnType = '\Criteo\Marketing\Model\CategoryMessage';
        $request = $this->getCategoriesRequest($campaign_id, $enabled_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategories'
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  bool $enabled_only Optional. Returns only categories you can bid on. Defaults to false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCategoriesRequest($campaign_id, $enabled_only = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCategories'
            );
        }

        $resourcePath = '/legacy/marketing/v1/campaigns/{campaignId}/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($enabled_only !== null) {
            $queryParams['enabledOnly'] = ObjectSerializer::toQueryValue($enabled_only);
        }

        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategory
     *
     * Gets a specific category
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  int $category_hash_code Mandatory. The id of the category to return. (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\CategoryMessage
     */
    public function getCategory($campaign_id, $category_hash_code)
    {
        list($response) = $this->getCategoryWithHttpInfo($campaign_id, $category_hash_code);
        return $response;
    }

    /**
     * Operation getCategoryWithHttpInfo
     *
     * Gets a specific category
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  int $category_hash_code Mandatory. The id of the category to return. (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\CategoryMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryWithHttpInfo($campaign_id, $category_hash_code)
    {
        $request = $this->getCategoryRequest($campaign_id, $category_hash_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\CategoryMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\CategoryMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\CategoryMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\CategoryMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryAsync
     *
     * Gets a specific category
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  int $category_hash_code Mandatory. The id of the category to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryAsync($campaign_id, $category_hash_code)
    {
        return $this->getCategoryAsyncWithHttpInfo($campaign_id, $category_hash_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryAsyncWithHttpInfo
     *
     * Gets a specific category
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  int $category_hash_code Mandatory. The id of the category to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryAsyncWithHttpInfo($campaign_id, $category_hash_code)
    {
        $returnType = '\Criteo\Marketing\Model\CategoryMessage';
        $request = $this->getCategoryRequest($campaign_id, $category_hash_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategory'
     *
     * @param  int $campaign_id Mandatory. The id of the campaign the categories are linked to. (required)
     * @param  int $category_hash_code Mandatory. The id of the category to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCategoryRequest($campaign_id, $category_hash_code)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCategory'
            );
        }
        // verify the required parameter 'category_hash_code' is set
        if ($category_hash_code === null || (is_array($category_hash_code) && count($category_hash_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_hash_code when calling getCategory'
            );
        }

        $resourcePath = '/legacy/marketing/v1/campaigns/{campaignId}/categories/{categoryHashCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($category_hash_code !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryHashCode' . '}',
                ObjectSerializer::toPathValue($category_hash_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAdSets
     *
     * @param  \Criteo\Marketing\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\ResponseAdSetId
     */
    public function patchAdSets($requests_patch_ad_set = null)
    {
        list($response) = $this->patchAdSetsWithHttpInfo($requests_patch_ad_set);
        return $response;
    }

    /**
     * Operation patchAdSetsWithHttpInfo
     *
     * @param  \Criteo\Marketing\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\ResponseAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAdSetsWithHttpInfo($requests_patch_ad_set = null)
    {
        $request = $this->patchAdSetsRequest($requests_patch_ad_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\ResponseAdSetId' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ResponseAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\ResponseAdSetId';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ResponseAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAdSetsAsync
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsAsync($requests_patch_ad_set = null)
    {
        return $this->patchAdSetsAsyncWithHttpInfo($requests_patch_ad_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAdSetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsAsyncWithHttpInfo($requests_patch_ad_set = null)
    {
        $returnType = '\Criteo\Marketing\Model\ResponseAdSetId';
        $request = $this->patchAdSetsRequest($requests_patch_ad_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAdSets'
     *
     * @param  \Criteo\Marketing\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchAdSetsRequest($requests_patch_ad_set = null)
    {

        $resourcePath = '/2021-07/marketing-solutions/ad-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requests_patch_ad_set)) {
            $_tempBody = $requests_patch_ad_set;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAdSets
     *
     * @param  \Criteo\Marketing\Model\RequestAdSetSearch $request_ad_set_search request_ad_set_search (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\ResponsesReadAdSet
     */
    public function searchAdSets($request_ad_set_search = null)
    {
        list($response) = $this->searchAdSetsWithHttpInfo($request_ad_set_search);
        return $response;
    }

    /**
     * Operation searchAdSetsWithHttpInfo
     *
     * @param  \Criteo\Marketing\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\ResponsesReadAdSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAdSetsWithHttpInfo($request_ad_set_search = null)
    {
        $request = $this->searchAdSetsRequest($request_ad_set_search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\ResponsesReadAdSet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ResponsesReadAdSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\ResponsesReadAdSet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ResponsesReadAdSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAdSetsAsync
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsAsync($request_ad_set_search = null)
    {
        return $this->searchAdSetsAsyncWithHttpInfo($request_ad_set_search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAdSetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsAsyncWithHttpInfo($request_ad_set_search = null)
    {
        $returnType = '\Criteo\Marketing\Model\ResponsesReadAdSet';
        $request = $this->searchAdSetsRequest($request_ad_set_search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAdSets'
     *
     * @param  \Criteo\Marketing\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchAdSetsRequest($request_ad_set_search = null)
    {

        $resourcePath = '/2021-07/marketing-solutions/ad-sets/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request_ad_set_search)) {
            $_tempBody = $request_ad_set_search;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startAdSets
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\ResponsesAdSetId
     */
    public function startAdSets($requests_ad_set_id = null)
    {
        list($response) = $this->startAdSetsWithHttpInfo($requests_ad_set_id);
        return $response;
    }

    /**
     * Operation startAdSetsWithHttpInfo
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function startAdSetsWithHttpInfo($requests_ad_set_id = null)
    {
        $request = $this->startAdSetsRequest($requests_ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\ResponsesAdSetId';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startAdSetsAsync
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsync($requests_ad_set_id = null)
    {
        return $this->startAdSetsAsyncWithHttpInfo($requests_ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startAdSetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsyncWithHttpInfo($requests_ad_set_id = null)
    {
        $returnType = '\Criteo\Marketing\Model\ResponsesAdSetId';
        $request = $this->startAdSetsRequest($requests_ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startAdSets'
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startAdSetsRequest($requests_ad_set_id = null)
    {

        $resourcePath = '/2021-07/marketing-solutions/ad-sets/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requests_ad_set_id)) {
            $_tempBody = $requests_ad_set_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopAdSets
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\ResponsesAdSetId
     */
    public function stopAdSets($requests_ad_set_id = null)
    {
        list($response) = $this->stopAdSetsWithHttpInfo($requests_ad_set_id);
        return $response;
    }

    /**
     * Operation stopAdSetsWithHttpInfo
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopAdSetsWithHttpInfo($requests_ad_set_id = null)
    {
        $request = $this->stopAdSetsRequest($requests_ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\ResponsesAdSetId';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopAdSetsAsync
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsync($requests_ad_set_id = null)
    {
        return $this->stopAdSetsAsyncWithHttpInfo($requests_ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopAdSetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsyncWithHttpInfo($requests_ad_set_id = null)
    {
        $returnType = '\Criteo\Marketing\Model\ResponsesAdSetId';
        $request = $this->stopAdSetsRequest($requests_ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopAdSets'
     *
     * @param  \Criteo\Marketing\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopAdSetsRequest($requests_ad_set_id = null)
    {

        $resourcePath = '/2021-07/marketing-solutions/ad-sets/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requests_ad_set_id)) {
            $_tempBody = $requests_ad_set_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBids
     *
     * Update bids for campaigns and their categories
     *
     * @param  \Criteo\Marketing\Model\CampaignBidChangeRequest[] $bid_changes Specifies the list of bid changes to be applied. (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\CampaignMessage[]|\Criteo\Marketing\Model\CampaignBidChangeResponseMessageWithDetails
     */
    public function updateBids($bid_changes)
    {
        list($response) = $this->updateBidsWithHttpInfo($bid_changes);
        return $response;
    }

    /**
     * Operation updateBidsWithHttpInfo
     *
     * Update bids for campaigns and their categories
     *
     * @param  \Criteo\Marketing\Model\CampaignBidChangeRequest[] $bid_changes Specifies the list of bid changes to be applied. (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\CampaignMessage[]|\Criteo\Marketing\Model\CampaignBidChangeResponseMessageWithDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBidsWithHttpInfo($bid_changes)
    {
        $request = $this->updateBidsRequest($bid_changes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\CampaignMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\CampaignMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\CampaignBidChangeResponseMessageWithDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\CampaignBidChangeResponseMessageWithDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\CampaignMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\CampaignMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\CampaignBidChangeResponseMessageWithDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBidsAsync
     *
     * Update bids for campaigns and their categories
     *
     * @param  \Criteo\Marketing\Model\CampaignBidChangeRequest[] $bid_changes Specifies the list of bid changes to be applied. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidsAsync($bid_changes)
    {
        return $this->updateBidsAsyncWithHttpInfo($bid_changes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBidsAsyncWithHttpInfo
     *
     * Update bids for campaigns and their categories
     *
     * @param  \Criteo\Marketing\Model\CampaignBidChangeRequest[] $bid_changes Specifies the list of bid changes to be applied. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidsAsyncWithHttpInfo($bid_changes)
    {
        $returnType = '\Criteo\Marketing\Model\CampaignMessage[]';
        $request = $this->updateBidsRequest($bid_changes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBids'
     *
     * @param  \Criteo\Marketing\Model\CampaignBidChangeRequest[] $bid_changes Specifies the list of bid changes to be applied. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBidsRequest($bid_changes)
    {
        // verify the required parameter 'bid_changes' is set
        if ($bid_changes === null || (is_array($bid_changes) && count($bid_changes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bid_changes when calling updateBids'
            );
        }

        $resourcePath = '/legacy/marketing/v1/campaigns/bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($bid_changes)) {
            $_tempBody = $bid_changes;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
